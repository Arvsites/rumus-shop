import os, asyncio, json
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")  # e.g. https://92-51-22-168.sslip.io
if not BOT_TOKEN or not WEBAPP_URL:
    raise RuntimeError("Need BOT_TOKEN and WEBAPP_URL")

bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
LAST_MSG = {}  # tg_user_id -> message_id (–¥–ª—è –∑–∞—á–∏—Å—Ç–∫–∏)

def main_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEBAPP_URL))]],
        resize_keyboard=True
    )

@dp.message(CommandStart())
async def cmd_start(m: Message):
    # —Ä–∞–∑—Ä–µ—à–∞–µ–º /start —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞ ‚Äî –¢–ó
    # —á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –±—ã–ª–æ)
    try:
        mid = LAST_MSG.get(m.from_user.id)
        if mid: await bot.delete_message(chat_id=m.chat.id, message_id=mid)
    except: pass
    msg = await m.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µüëá", reply_markup=main_menu_kb())
    LAST_MSG[m.from_user.id] = msg.message_id

@dp.message(F.web_app_data)
async def on_webapp_data(m: Message):
    # –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App —á–µ—Ä–µ–∑ sendData
    try:
        data = json.loads(m.web_app_data.data)
    except Exception:
        data = {"raw": m.web_app_data.data}
    await m.answer(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ MiniApp: <code>{json.dumps(data)}</code>", reply_markup=ReplyKeyboardRemove())

@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_menu(m: Message):
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    try:
        mid = LAST_MSG.get(m.from_user.id)
        if mid: await bot.delete_message(chat_id=m.chat.id, message_id=mid)
    except: pass
    msg = await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
    LAST_MSG[m.from_user.id] = msg.message_id

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
