import os
import asyncio
import json
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# === ENV ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://92-51-22-168.sslip.io
if not BOT_TOKEN or not WEBAPP_URL:
    raise RuntimeError("Need BOT_TOKEN and WEBAPP_URL in environment")

# === BOT/DP ===
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# —Ö—Ä–∞–Ω–∏–º id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ¬´–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è¬ª (–∑–∞—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞—Ö)
LAST_MSG: dict[int, int] = {}  # tg_user_id -> message_id


def main_menu_kb(ref_code: Optional[str] = None) -> ReplyKeyboardMarkup:
    """
    –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App. –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ-–∫–æ–¥, –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –µ–≥–æ –≤ URL (?ref=...)
    —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –º–æ–≥ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å referral_code –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    """
    url = WEBAPP_URL
    if ref_code:
        sep = "&" if "?" in url else "?"
        url = f"{url}{sep}ref={ref_code}"

    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=url))],
            [KeyboardButton(text="–ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


def extract_start_payload(m: Message) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ–º payload –∏–∑ deep-link: /start <payload>.
    –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞:
      "/start" -> ""
      "/start abc123" -> "abc123"
    """
    if not m.text:
        return ""
    parts = m.text.split(maxsplit=1)
    return parts[1].strip() if len(parts) > 1 else ""


@dp.message(CommandStart())
async def cmd_start(m: Message):
    # —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ deep-link
    ref = extract_start_payload(m)

    # —á–∏—Å—Ç–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        mid = LAST_MSG.get(m.from_user.id)
        if mid:
            await bot.delete_message(chat_id=m.chat.id, message_id=mid)
    except Exception:
        pass

    msg = await m.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üëá",
        reply_markup=main_menu_kb(ref_code=ref)
    )
    LAST_MSG[m.from_user.id] = msg.message_id


@dp.message(F.web_app_data)
async def on_webapp_data(m: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö Mini App —á–µ—Ä–µ–∑ tg.sendData().
    –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ —á–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
    """
    try:
        data = json.loads(m.web_app_data.data)
    except Exception:
        data = {"raw": m.web_app_data.data}

    await m.answer(
        f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ MiniApp: <code>{json.dumps(data, ensure_ascii=False)}</code>",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_menu(m: Message):
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∑–∞—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        mid = LAST_MSG.get(m.from_user.id)
        if mid:
            await bot.delete_message(chat_id=m.chat.id, message_id=mid)
    except Exception:
        pass

    msg = await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
    LAST_MSG[m.from_user.id] = msg.message_id


async def main():
    # –ï—Å–ª–∏ —Ä–∞–Ω—å—à–µ —Å—Ç–æ—è–ª –≤–µ–±—Ö—É–∫ ‚Äî –µ–≥–æ –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Ä—É—á–Ω—É—é:
    # await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
