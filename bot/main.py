# bot/main.py
import asyncio
import os
from contextlib import suppress

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    WebAppInfo,
    Update,
)
from loguru import logger


# --- –ö–æ–Ω—Ñ–∏–≥ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")  # –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ docker-compose (https://${DOMAIN})

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω (–æ–∂–∏–¥–∞–ª—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è).")
if not WEBAPP_URL:
    # –Ω–µ –ø–∞–¥–∞–µ–º, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º
    logger.warning("WEBAPP_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä–æ–µ—Ç –ø—É—Å—Ç–æ–π URL.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(BOT_TOKEN)
dp = Dispatcher()


# --- /start —Å –∫–Ω–æ–ø–∫–æ–π Mini App ---
@dp.message(CommandStart())
async def handle_start(m: Message) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEBAPP_URL or "https://example.com"))]
        ]
    )
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App.", reply_markup=kb)


# --- –õ–û–ì –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∞–ø–¥–µ–π—Ç–æ–≤ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏) ---
@dp.update()
async def log_all_updates(upd: Update) -> None:
    try:
        # –∫–æ—Ä–æ—Ç–∫–∏–π JSON, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ö–ª–∞–º–ª—è—Ç—å –ª–æ–≥–∏
        snippet = upd.model_dump_json()[:800]
        logger.info(f"UPDATE: {upd.event_type} :: {snippet}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ø–¥–µ–π—Ç–∞: {e}")


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App (WebApp.sendData) ---
@dp.message(F.web_app_data)
async def handle_webapp_data(m: Message) -> None:
    data = m.web_app_data.data  # —Å—Ç—Ä–æ–∫–∞ JSON, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–∑ Mini App
    await m.answer(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ Mini App:\n{data}")


# --- –§–æ–ª–ª–±–µ–∫ –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
@dp.message(F.text)
async def fallback(m: Message) -> None:
    await m.answer("–û—Ç–ø—Ä–∞–≤—å /start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App.")


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
async def _run() -> None:
    logger.info("–ë–æ—Ç: —Å—Ç–∞—Ä—Ç polling")
    # –ù–∞ –≤—Å—è–∫–∏–π –æ—á–∏—Å—Ç–∏–º webhook (–∏–Ω–∞—á–µ polling –Ω–µ –ø–æ–ª—É—á–∏—Ç –∞–ø–¥–µ–π—Ç—ã)
    await bot.delete_webhook(drop_pending_updates=False)
    # –Ø–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∏–º —Ç–∏–ø—ã –∞–ø–¥–µ–π—Ç–æ–≤ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])


def main() -> None:
    try:
        asyncio.run(_run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ Ctrl+C")
    finally:
        with suppress(Exception):
            asyncio.run(bot.session.close())


if __name__ == "__main__":
    main()
