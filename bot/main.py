import asyncio
import os
from contextlib import suppress
from typing import NoReturn

from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from dotenv import load_dotenv
from loguru import logger

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def handle_start(m: Message) -> None:
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEBAPP_URL))
    ]])
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Mini App.", reply_markup=kb)

# –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App (Telegram.WebApp.sendData)
@dp.message(F.web_app_data)
async def handle_webapp_data(m: Message) -> None:
    await m.answer(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ Mini App:\n{m.web_app_data.data}")

async def _run() -> NoReturn:
    logger.info("–ë–æ—Ç: —Å—Ç–∞—Ä—Ç polling")
    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ webhook (–∏–Ω–∞—á–µ polling –Ω–µ –ø–æ–ª—É—á–∏—Ç –∞–ø–¥–µ–π—Ç—ã)
    await bot.delete_webhook(drop_pending_updates=False)
    await dp.start_polling(bot)

def main() -> None:
    # –æ—Ç–¥–µ–ª—å–Ω—ã–π event loop ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C
    try:
        asyncio.run(_run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ Ctrl+C")
    finally:
        # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º HTTP‚Äë–∫–ª–∏–µ–Ω—Ç aiogram
        with suppress(Exception):
            asyncio.run(bot.session.close())

if __name__ == "__main__":
    main()
